// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Renderer is an autogenerated mock type for the Renderer type
type Renderer struct {
	mock.Mock
}

// InputMenu provides a mock function with given fields: ctx, title, validateFunc
func (_m *Renderer) InputMenu(ctx context.Context, title string, validateFunc func(string) error) (string, error) {
	ret := _m.Called(ctx, title, validateFunc)

	if len(ret) == 0 {
		panic("no return value specified for InputMenu")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string) error) (string, error)); ok {
		return rf(ctx, title, validateFunc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string) error) string); ok {
		r0 = rf(ctx, title, validateFunc)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, func(string) error) error); ok {
		r1 = rf(ctx, title, validateFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTerminal provides a mock function with no fields
func (_m *Renderer) IsTerminal() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTerminal")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Logo provides a mock function with no fields
func (_m *Renderer) Logo() {
	_m.Called()
}

// Read provides a mock function with given fields: p
func (_m *Renderer) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadLine provides a mock function with no fields
func (_m *Renderer) ReadLine() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadLine")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectionMenu provides a mock function with given fields: ctx, title, items
func (_m *Renderer) SelectionMenu(ctx context.Context, title string, items []string) (string, error) {
	ret := _m.Called(ctx, title, items)

	if len(ret) == 0 {
		panic("no return value specified for SelectionMenu")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (string, error)); ok {
		return rf(ctx, title, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) string); ok {
		r0 = rf(ctx, title, items)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, title, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TextMenu provides a mock function with given fields: ctx, title
func (_m *Renderer) TextMenu(ctx context.Context, title string) (string, error) {
	ret := _m.Called(ctx, title)

	if len(ret) == 0 {
		panic("no return value specified for TextMenu")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithSpinner provides a mock function with given fields: title, fn
func (_m *Renderer) WithSpinner(title string, fn func()) {
	_m.Called(title, fn)
}

// NewRenderer creates a new instance of Renderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRenderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Renderer {
	mock := &Renderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
