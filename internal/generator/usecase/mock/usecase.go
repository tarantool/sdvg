// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"
	usecase "github.com/tarantool/sdvg/internal/generator/usecase"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, config
func (_m *UseCase) CreateTask(ctx context.Context, config usecase.TaskConfig) (string, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.TaskConfig) (string, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.TaskConfig) string); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.TaskConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProgress provides a mock function with given fields: taskID
func (_m *UseCase) GetProgress(taskID string) (map[string]usecase.Progress, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetProgress")
	}

	var r0 map[string]usecase.Progress
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]usecase.Progress, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]usecase.Progress); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]usecase.Progress)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResult provides a mock function with given fields: taskID
func (_m *UseCase) GetResult(taskID string) (bool, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Setup provides a mock function with no fields
func (_m *UseCase) Setup() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Teardown provides a mock function with no fields
func (_m *UseCase) Teardown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Teardown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitResult provides a mock function with given fields: taskID
func (_m *UseCase) WaitResult(taskID string) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for WaitResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
